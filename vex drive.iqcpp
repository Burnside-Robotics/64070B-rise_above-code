{"mode":"Text","textContent":"//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\n\nusing namespace vex;\nfloat armspeed = 100; //constant float variable\nbool driveReversed;\nvoid ToggleDriveDirection()\n{\n  driveReversed = !driveReversed;\n}\nvoid SetRiser(bool on, bool up)\n{\n  if(on)\n  {\n    if(up)\n    {\narmDrive1.setVelocity(armspeed, percent); //Setvelocity = speed, armDrive and armspeed are floats\n     armDrive1.spin(forward); //spin forward\n     armDrive3.setVelocity(armspeed, percent);\n     armDrive3.spin(forward);\n    }\n    else\n    {\n armDrive1.setVelocity(armspeed, percent);\n     armDrive1.spin(reverse);//spin reverse\n     armDrive3.setVelocity(armspeed, percent);\n     armDrive3.spin(reverse);\n    }\n  }\n  else {\n     armDrive1.setVelocity(1,percent);\n     armDrive1.spin(forward);\n     armDrive3.setVelocity(1,percent);\n     armDrive3.spin(forward);\n  }\n}\nvoid Auton() //Autonomous mode\n{\n  Drivetrain.turnFor(left, 69, degrees); //Setup Drivetrain in Devices menu, then you can do these statements\n  Drivetrain.driveFor(forward, 420, mm);\n  SetRiser(true, true); // Turn riser on up\n    SetRiser(true, true); // Turn riser on down\n  SetRiser(false, true); // Turn riser off, second bool does not matter when first is false\n}\nint main() {\n  Controller.ButtonEUp.pressed(ToggleDriveDirection);\n\nfloat drivespeed = 100;\nint counter = 0;\n\n\n  while(true)\n  {\n    \n   leftMotorA.spin(forward, driveReversed ? -Controller.AxisA.position() : Controller.AxisA.position(), percent);//These are for easier reverse of the remote\n   rightMotorA.spin(forward, driveReversed ? -Controller.AxisD.position() : Controller.AxisD.position(), percent);\n   leftMotorB.spin(forward, driveReversed ? -Controller.AxisA.position() : Controller.AxisA.position(), percent);\n   rightMotorB.spin(forward, driveReversed ? -Controller.AxisD.position() : Controller.AxisD.position(), percent);\n\n\n if (Controller.ButtonRUp.pressing()) //If The Button *x* On Controller is Pressed\n   {\n     armDrive1.setVelocity(armspeed, percent);\n     armDrive1.spin(forward);\n     armDrive3.setVelocity(armspeed, percent);\n     armDrive3.spin(forward);\n   }\n   else if (Controller.ButtonRDown.pressing()) //Also if the Button *x* On Controller is Pressed\n   {\n   {\n     armDrive1.setVelocity(armspeed, percent);\n     armDrive1.spin(reverse);\n     armDrive3.setVelocity(armspeed, percent);\n     armDrive3.spin(reverse);\n   }\n   else //Anything else apart from the if and else if statements\n   {\n     armDrive1.setVelocity(1,percent);\n     armDrive1.spin(forward);\n     armDrive3.setVelocity(1,percent);\n     armDrive3.spin(forward);\n   }  \n   wait(0.1,seconds);\n }\n  wait(0.1,seconds);\n }\n\n","textLanguage":"cpp","rconfig":[{"port":[10],"name":"armDrive1","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[9],"name":"armDrive3","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","drive":"none"},"triportSourcePort":22},{"port":[3],"name":"Distance1","customName":true,"deviceType":"Distance","setting":{},"triportSourcePort":22},{"port":[1,7,2,8,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"type":"4-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"210","unit":"mm","wheelbase":"115","wheelbaseUnit":"mm"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":""}